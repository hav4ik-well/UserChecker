# meta developer: @wifitldev

import random
import asyncio
from .. import loader, utils

@loader.tds
class UserChecker(loader.Module):
    """–ü–æ–∏—Å–∫ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ Telegram API"""

    strings = {
        "name": "UserChecker",
        "searching": "üîç –ò—â—É 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤...",
        "found": "üéâ –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã:\n\n{}",
        "not_found": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∑–∞ 100 –ø–æ–ø—ã—Ç–æ–∫",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞: {}",
    }

    async def generate_username(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞ (5 –±—É–∫–≤)"""
        return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5))

    async def check_username(self, username):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ client.get_entity()"""
        try:
            await self.client.get_entity(username)
            return False  
        except ValueError:
            return True   
        except Exception:
            return False  

    @loader.command(
        ru_doc="–ù–∞–π—Ç–∏ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤",
        en_doc="Find 5 available usernames"
    )
    async def uccmd(self, message):
        """–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —á–µ—Ä–µ–∑ Telegram API"""
        await utils.answer(message, self.strings["searching"])
        
        try:
            usernames = []
            attempts = 0
            max_attempts = 100
            
            while len(usernames) < 5 and attempts < max_attempts:
                username = await self.generate_username()
                if await self.check_username(username):
                    usernames.append(f"‚Ä¢ @{username} - t.me/{username}")
                attempts += 1
                await asyncio.sleep(0.3)  

            if usernames:
                result = self.strings["found"].format("\n".join(usernames[:5]))  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
            else:
                result = self.strings["not_found"]
                
            await utils.answer(message, result)
                
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
