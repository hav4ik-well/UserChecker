# meta developer: @wifitldev
# requires: requests

import random
import requests
import asyncio
from .. import loader, utils

@loader.tds
class UsernameChecker(loader.Module):
    """–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ Telegram, –Ω–µ –≤—Å–µ–≥–¥–∞ —Ç–æ—á–Ω—ã–π"""

    strings = {
        "name": "UseChecker",
        "searching": "üîç –ò—â—É 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤...",
        "found": "üéâ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:\n\n{}",
        "not_found": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∑–∞ 50 –ø–æ–ø—ã—Ç–æ–∫",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞: {}",
    }

    async def generate_username(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞ (5 –±—É–∫–≤)"""
        return ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5))

    async def check_username(self, username):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞"""
        url = f"https://t.me/{username}"
        try:
            r = requests.get(url, timeout=5)
            return "If you have <strong>Telegram</strong>" in r.text
        except:
            return False

    @loader.command(
        ru_doc="–ù–∞–π—Ç–∏ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤",
        en_doc="Find 5 available usernames"
    )
    async def uccmd(self, message):
        """–ù–∞–π—Ç–∏ —Ä–æ–≤–Ω–æ 5 —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
        await utils.answer(message, self.strings["searching"])
        
        try:
            usernames = []
            attempts = 0
            max_attempts = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –ø–æ–ø—ã—Ç–æ–∫
            
            while len(usernames) < 5 and attempts < max_attempts:
                username = await self.generate_username()
                if await self.check_username(username):
                    usernames.append(f"‚Ä¢ @{username} - t.me/{username}")
                attempts += 1
                await asyncio.sleep(0.5)  # –ê–Ω—Ç–∏—Ñ–ª—É–¥

            if len(usernames) == 5:
                result = self.strings["found"].format("\n".join(usernames))
            else:
                result = self.strings["not_found"]
                
            await utils.answer(message, result)
                
        except Exception as e:
            error_msg = self.strings["error"].format(str(e))
            await utils.answer(message, error_msg)
